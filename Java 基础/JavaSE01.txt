Java笔记01（Day01-Day09）

目录
	
	
1.键盘录入
	1）导包 import java.util.Scanner;
	2）创建键盘录入对象 Scanner sc = new Scanner (System.in);
	3）键盘录入数据 int x = sc.nextInt ();

2.数组
	1）定义数组 数组数据类型[] 数组名
	2）数组初始化
		方式一：动态初始化 给定数组长度，由系统给出初始值；
			int[] arr = new int [5]
		方式二：静态初始化 给定数组各数据初始值，由系统给出长度。
			int[] arr = new int []{1,2,3,4,5}
			int[] arr = {1,2,3,4,5}
	3）new出来的东西将进入堆内存，其余的在栈内存；
	4）如直接输出数组名，将输出其地址；
	5）数组索引格式：数组名[索引]  arr[0];
	6）数组长度格式：数组名.length  arr.length;

3.二维数组
	1）定义方法：
		方式一：数据类型[][] 数组名
		方式二：数据类型 数组名[][]
		方式三：数据类型[] 数组名[]
			第一个[]：二维数组包含一维数组个数；
			第二个[]：每个一维数组包含元素个数。

4.面向对象：
	1）创建对象： 类名 对象名 = new 类名();
		可以创建匿名对象 new 类名(); 只能使用一次
	2）对象调用方法：对象名.方法名(参数值);
	3）对象参数：对象名.变量名

5.关键字private：
	是一个权限修饰符，可以修饰成员变量和成员方法，被修饰的成员只能在本类中访问。

6.关键字this：
	代表当前类的对象引用；方法被哪个对象调用，this就代表那个对象；
		使用场景：1.解决局部变量隐藏成员变量；

7.构造方法的注意事项：
	1）如果我们没有给出构造方法，系统将自动给出一个无参构造方法；
	2）如果我们给出了构造方法（无论有参无参），系统都不会再给出默认无参构造方法。此时如果还想使用无参构造方法，就必须自己给出。

8.static关键字：
	1）可以修饰成员变量和成员方法；
	2）随着类的加载而加载；
	3）优先于对象存在；
	4）被类中的所有对象共享；
	5）可以通过类名调用；
	6）静态修饰的相关内容我们一般称为：与类相关的，或者类成员。
		注意事项：
			1）静态是随着类的加载而加载，this随对象的创建而存在，所以静态方法中没有this；
			2）静态方法只能访问静态成员变量和静态成员方法。

9.制作帮助文档：
	格式：javadoc -d 目录 -author -version ArrayTools.java
	文档注释格式：
		/**
		* 内容
		* 内容
		* 内容
		*/

10.代码块
	1）局部代码块 在方法中出现，限定变量生命周期，及早释放以提高内存利用率；
	2）构造代码块 在类中方法外出现，将多个构造方法中相同的代码存放到一起，每次调用构造方法都会执行，并且会在构造方法前执行；
	3）静态代码块 在类中方法外出现，加了static修饰，用于给类进行初始化。其在类加载的时候就执行，并且只执行一次。
		举例：
			static {
				内容
			}

11.类的继承
	1）概述：多个类中存在相同的属性和行为时，将这些内容单独抽取到一个类中，那么多个类就无需再重新定义这些属性和行为，只要继承那个类即可；
	2）格式：class 子类名 extends 父类名 {}；
	3）Java支持单继承，不支持多继承（一个类只能有一个父类，不能有多个父类）；Java支持多层继承；
		注意事项：
			1）子类只能继承父类所有的非私有成员变量和成员方法；
			2）子类不能继承父类的构造方法，但可以通过super关键字去访问父类的构造方法；
			3）不要为了部分功能而去继承，否则可能会多出不需要的成员变量或成员方法；
			4）什么时候考虑继承呢？继承体现的是一种“is a”的关系，当出现这种关系的时候，可以考虑继承。
			5）子类中的成员变量和父类中的成员变量名称一样，此时在子类方法中访问该变量的顺序是：
					在子类方法的局部范围找==>在子类的成员变量范围找==>在父类的成员变量范围找

12.this和super关键字：
	1）this代表对本类对应的引用，super代表父类存储空间的标识（可以理解为父类引用，可以操作	父类的成员）；
	2）用法：
		A.调用成员变量：
			this.成员变量 //调用本类的成员变量
			super.成员变量 //调用父类的成员变量
		B.调用构造方法：
			this(...) //调用本类构造方法
			super(...) //调用父类构造方法
		C.调用成员方法：
			this.成员方法() //调用本类的成员方法
			super.成员方法() //调用父类的成员方法

13.继承中构造方法的关系：
	子类中所有的构造方法默认都会访问父类中的无参构造方法，原因是子类会继承父类中的数据，所以子类初始化之前，一定要先完成父类数据的初始化。注意，子类每一个构造方法的第一条语句默认都是super();
		如果父类没有无参构造方法，不对其进行初始化将会报错。解决方法如下：
			1）子类通过super去显示调用父类的其他带参构造方法；
			2）子类通过this去调用本类其他构造方法，注意其他构造方法也必须首先访问了父类构造；
			3）注意super()  this() 必须出现在第一条语句，否则就会有父类数据的多次初始化。

14.方法重写：
	定义：子类中出现了和父类中方法声明一模一样的方法。
	调用：子类对象调用方法的时候，先找子类本身，再找父类。
	应用：当子类需要父类的功能，而功能主体子类具有自己的特有内容时，可以重写父类中的方法。这样既沿袭了父类的功能，又赋予了子类特有的内容。
		注意事项：
			1）父类中私有方法不能重写，因为子类不能继承父类中的私有方法；
			2）子类重写父类方法时，访问权限不能更低，最好访问权限一致；
			3）父类的静态方法，子类也必须通过静态方法进行重写。
				（子类继承父类方法的时候，方法声明最好一模一样）

15.关键字final
	final是最终的意思，可以修饰类，方法，变量：
		1）final修饰类：该类不能被继承；
		2）final修饰方法：该方法不能被重写；
		3）final修饰变量：该变量不能被重新赋值，因为这个变量其实就是常量。被final修饰的变量只能赋值一次。
	注意：final修饰的局部变量若为基本类型，其值不能发生改变；若为引用类型，其地址值不能发生改变。

16.多态
	定义：是一个对象（事物），在不同时刻体现出来的不同的状态。
		多态的前提：
			1）要有继承关系；
			2）要有方法重写；
			3）要有父类引用指向子类的对象，如
				父 Fu = new 子();
		多态中成员访问的特点：
			Fu f = new Zi();
			1）成员变量：编译看左边，运行看左边；
			2）构造方法：创建子类对象的时候，访问父类的构造方法，对父类数据进行初始化；
			3）成员方法：编译看左边，运行看右边（这是由于继承时存在方法重写）；
			4）静态方法：编译看左边，运行看左边（静态和类相关）。

17.抽象类
	1）概述：我们把一个不是具体的功能称为抽象的功能，而一个类中如果有抽象功能，该类必然是抽象类。
	2）特点：
		A：抽象类和抽象方法必须用abstract关键字修饰；
		B：抽象类中不一定有抽象方法，但是有抽象方法的类必然是抽象类；
		C：抽象类不能实例化，因为它不是具体的；
			 抽象类有构造方法，但是不能实例化；
		D：抽象类的子类：
			  a：如果不重写抽象方法，那么子类是一个抽象类；
			  b：如果重写所有抽象方法，这个时候子类是一个具体的类。
	3）格式举例：
		抽象类：abstract class {}
		抽象方法：public static abstract void function();
	4）抽象类的实例化其实是靠具体的子类实现的，是多态的方式。

18.抽象类的成员特点
	成员变量：既可以是变量，也可以是常量；
	构造方法：有，用于子类访问父类数据的初始化；
	成员方法：既可以是抽象的，也可以是非抽象的。
		抽象类的成员方法特性：
			A：抽象方法，为强制要求子类做的事情（重写）；
			B：非抽象方法，子类继承的事情，提高代码的复用性。

19.抽象类的相关问题
	1）一个类如果没有抽象方法，可不可以被定义为抽象类？如果可以，有什么意义？
			可以。意义是不让创建该类的对象。
	2）abstract不能和以下关键字共存：
			A：private 共存时报非法的修饰组合，原因是private方法不能被重写，而abstract修饰的方法必须让子类重写。
			B：final 共存时报非法的修饰组合，理由同上。
			C：static 共存时不报错但是无意义，因为被static修饰的方法可以通过类名直接调用，而抽象方法没有方法体。

20.接口
	接口的特点：
		A：接口用关键字interface表示：
			interface 接口名 {}
		B：类实现接口用implements表示
			class 类名 implements 接口名 {}
		C：接口不可以实例化，不过可以通过多态的方式来实例化
		D：接口的子类：
			1）可以是抽象类，不过意义不大；
			2）可以是具体类，不过要求子类重写接口中所有的抽象方法。
	接口成员特点：
		A：成员变量：接口的成员变量只能是常量，并且是静态的，
			默认修饰符：public static final   建议这三个修饰符手动给出。
		B：构造方法：接口没有构造方法，实现接口的类是继承的Object类的构造方法。
			（类Object是类层次结构的根类，每个类都使用Object作为超类）
		C：成员方法：接口的成员方法只能是抽象方法，
			默认修饰符：public abstract    建议这两个修饰符手动给出。
	接口的实现类格式：
		接口名 + Impl
			如接口名Inter，实现类即为InterImpl

21.接口、类之间的关系
	A：类与类：
		继承关系，可以是单继承，也可以是多层继承，不可以多继承。
	B：类与接口：
		实现关系，可以单实现，也可以多实现，并且还可以在继承一个类的同时实现多个接口。
			格式举例：class son extends Object implements Father,Mother
	C：接口与接口：
		继承关系，可以单继承，也可以多继承
			格式举例：interface Sister extends Father,Mother

---------------------------------------------------------------------
